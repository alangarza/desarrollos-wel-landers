/*!
* Parsley.js
* Version 2.8.1 - built Sat, Feb 3rd 2018, 2:27 pm
* http://parsleyjs.org
* Guillaume Potier - <guillaume@wisembly.com>
* Marc-Andre Lafortune - <petroselinum@marc-andre.ca>
* MIT Licensed
*/
// The source code below is generated by babel as
// Parsley is written in ECMAScript 6
//
function _toConsumableArray(t){if(Array.isArray(t)){for(var e=0,i=Array(t.length);e<t.length;e++)i[e]=t[e];return i}return Array.from(t)}var _slice=Array.prototype.slice,_slicedToArray=function(){function i(t,e){var i=[],r=!0,n=!1,s=void 0;try{for(var a=t[Symbol.iterator](),o;!(r=(o=a.next()).done)&&(i.push(o.value),!e||i.length!==e);r=!0);}catch(t){n=!0,s=t}finally{try{!r&&a.return&&a.return()}finally{if(n)throw s}}return i}return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return i(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t};!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],e):t.parsley=e(t.jQuery)}(this,function(p){"use strict";
// Returns an event handler that calls `fn` with the arguments it expects
function n(e,i){
// Store to allow unbinding
return e.parsleyAdaptedCallback||(e.parsleyAdaptedCallback=function(){var t=Array.prototype.slice.call(arguments,0);t.unshift(this),e.apply(i||R,t)}),e.parsleyAdaptedCallback}
// Converts 'parsley:form:validate' into 'form:validate'
function s(t){return 0===t.lastIndexOf(I,0)?t.substr(I.length):t}
// $.listen is deprecated. Use Parsley.on instead.
/**
   * inputevent - Alleviate browser bugs for input events
   * https://github.com/marcandre/inputevent
   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)
   * @author Marc-Andre Lafortune <github@marc-andre.ca>
   * @license MIT
   */
function t(){var n=this,s=window||global;
// Slightly odd way construct our object. This way methods are force bound.
// Used to test for duplicate library.
_extends(this,{
// For browsers that do not support isTrusted, assumes event is native.
isNativeEvent:function t(e){return e.originalEvent&&!1!==e.originalEvent.isTrusted},fakeInputEvent:function t(e){n.isNativeEvent(e)&&p(e.target).trigger("input")},misbehaves:function t(e){n.isNativeEvent(e)&&(n.behavesOk(e),p(document).on("change.inputevent",e.data.selector,n.fakeInputEvent),n.fakeInputEvent(e))},behavesOk:function t(e){n.isNativeEvent(e)&&p(document).off("input.inputevent",e.data.selector,n.behavesOk).off("change.inputevent",e.data.selector,n.misbehaves)},
// Bind the testing handlers
install:function t(){if(!s.inputEventPatched){s.inputEventPatched="0.0.3";for(var e=["select",'input[type="checkbox"]','input[type="radio"]','input[type="file"]'],i=0;i<e.length;i++){var r=e[i];p(document).on("input.inputevent",r,{selector:r},n.behavesOk).on("change.inputevent",r,{selector:r},n.misbehaves)}}},uninstall:function t(){delete s.inputEventPatched,p(document).off(".inputevent")}})}var e=1,i={},h={
// Parsley DOM-API
// returns object from dom attributes and values
attr:function t(e,i,r){var n,s,a,o=new RegExp("^"+i,"i");if(void 0===r)r={};else
// Clear all own properties. This won't affect prototype's values
for(n in r)r.hasOwnProperty(n)&&delete r[n];if(!e)return r;for(n=(a=e.attributes).length;n--;)(s=a[n])&&s.specified&&o.test(s.name)&&(r[this.camelize(s.name.slice(i.length))]=this.deserializeValue(s.value));return r},checkAttr:function t(e,i,r){return e.hasAttribute(i+r)},setAttr:function t(e,i,r,n){e.setAttribute(this.dasherize(i+r),String(n))},getType:function t(e){return e.getAttribute("type")||"text"},generateID:function t(){return""+e++},
/** Third party functions **/
deserializeValue:function t(e){var i;try{return e?"true"==e||"false"!=e&&("null"==e?null:isNaN(i=Number(e))?/^[\[\{]/.test(e)?JSON.parse(e):e:i):e}catch(t){return e}},
// Zepto camelize function
camelize:function t(e){return e.replace(/-+(.)?/g,function(t,e){return e?e.toUpperCase():""})},
// Zepto dasherize function
dasherize:function t(e){return e.replace(/::/g,"/").replace(/([A-Z]+)([A-Z][a-z])/g,"$1_$2").replace(/([a-z\d])([A-Z])/g,"$1_$2").replace(/_/g,"-").toLowerCase()},warn:function t(){var e;window.console&&"function"==typeof window.console.warn&&(e=window.console).warn.apply(e,arguments)},warnOnce:function t(e){i[e]||(i[e]=!0,this.warn.apply(this,arguments))},_resetWarnings:function t(){i={}},trimString:function t(e){return e.replace(/^\s+|\s+$/g,"")},parse:{date:function t(e){var i=e.match(/^(\d{4,})-(\d\d)-(\d\d)$/);if(!i)return null;var r=i.map(function(t){return parseInt(t,10)}),n=_slicedToArray(r,4),s=n[0],a=n[1],o=n[2],l=n[3],t=new Date(a,o-1,l);return t.getFullYear()!==a||t.getMonth()+1!==o||t.getDate()!==l?null:t},string:function t(e){return e},integer:function t(e){return isNaN(e)?null:parseInt(e,10)},number:function t(e){if(isNaN(e))throw null;return parseFloat(e)},boolean:function t(e){return!/^\s*false\s*$/i.test(e)},object:function t(e){return h.deserializeValue(e)},regexp:function t(e){var i="";
// Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern
// Again, replace the regexp literal string with the first match group:
// everything excluding the opening and closing slashes and the flags
return e=/^\/.*\/(?:[gimy]*)$/.test(e)?(
// Replace the regexp literal string with the first match group: ([gimy]*)
// If no flag is present, this will be a blank string
i=e.replace(/.*\/([gimy]*)$/,"$1"),e.replace(new RegExp("^/(.*?)/"+i+"$"),"$1")):"^"+e+"$",new RegExp(e,i)}},parseRequirement:function t(e,i){var r=this.parse[e||"string"];if(!r)throw'Unknown requirement specification: "'+e+'"';var n=r(i);if(null===n)throw"Requirement is not a "+e+': "'+i+'"';return n},namespaceEvents:function t(e,i){return(e=this.trimString(e||"").split(/\s+/))[0]?p.map(e,function(t){return t+"."+i}).join(" "):""},difference:function t(e,i){
// This is O(N^2), should be optimized
var r=[];return p.each(e,function(t,e){-1==i.indexOf(e)&&r.push(e)}),r},
// Alter-ego to native Promise.all, but for jQuery
all:function t(e){
// jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements
return p.when.apply(p,_toConsumableArray(e).concat([42,42]))},
// Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill
objectCreate:Object.create||(r=function t(){},function(t){if(1<arguments.length)throw Error("Second argument not supported");if("object"!=typeof t)throw TypeError("Argument must be an object");r.prototype=t;var e=new r;return r.prototype=null,e}),_SubmitSelector:'input[type="submit"], button:submit'},r,a={
// ### General
// Default data-namespace for DOM API
namespace:"data-parsley-",
// Supported inputs by default
inputs:"input, textarea, select",
// Excluded inputs by default
excluded:"input[type=button], input[type=submit], input[type=reset], input[type=hidden]",
// Stop validating field on highest priority failing constraint
priorityEnabled:!0,
// ### Field only
// identifier used to group together inputs (e.g. radio buttons...)
multiple:null,
// identifier (or array of identifiers) used to validate only a select group of inputs
group:null,
// ### UI
// Enable\Disable error messages
uiEnabled:!0,
// Key events threshold before validation
validationThreshold:3,
// Focused field on form validation error. 'first'|'last'|'none'
focus:"first",
// event(s) that will trigger validation before first failure. eg: `input`...
trigger:!1,
// event(s) that will trigger validation after first failure.
triggerAfterFailure:"input",
// Class that would be added on every failing validation Parsley field
errorClass:"parsley-error",
// Same for success validation
successClass:"parsley-success",
// Return the `$element` that will receive these above success or error classes
// Could also be (and given directly from DOM) a valid selector like `'#div'`
classHandler:function t(e){},
// Return the `$element` where errors will be appended
// Could also be (and given directly from DOM) a valid selector like `'#div'`
errorsContainer:function t(e){},
// ul elem that would receive errors' list
errorsWrapper:'<ul class="parsley-errors-list"></ul>',
// li elem that would receive error message
errorTemplate:"<li></li>"},o=function t(){this.__id__=h.generateID()};o.prototype={asyncSupport:!0,// Deprecated
_pipeAccordingToValidationResult:function t(){var i=this,e=function t(){var e=p.Deferred();return!0!==i.validationResult&&e.reject(),e.resolve().promise()};return[e,e]},actualizeOptions:function t(){return h.attr(this.element,this.options.namespace,this.domOptions),this.parent&&this.parent.actualizeOptions&&this.parent.actualizeOptions(),this},_resetOptions:function t(e){
// Shallow copy of ownProperties of initOptions:
for(var i in this.domOptions=h.objectCreate(this.parent.options),this.options=h.objectCreate(this.domOptions),e)e.hasOwnProperty(i)&&(this.options[i]=e[i]);this.actualizeOptions()},_listeners:null,
// Register a callback for the given event name
// Callback is called with context as the first argument and the `this`
// The context is the current parsley instance, or window.Parsley if global
// A return value of `false` will interrupt the calls
on:function t(e,i){var r;return this._listeners=this._listeners||{},(this._listeners[e]=this._listeners[e]||[]).push(i),this},
// Deprecated. Use `on` instead
subscribe:function t(e,i){p.listenTo(this,e.toLowerCase(),i)},
// Unregister a callback (or all if none is given) for the given event name
off:function t(e,i){var r=this._listeners&&this._listeners[e];if(r)if(i)for(var n=r.length;n--;)r[n]===i&&r.splice(n,1);else delete this._listeners[e];return this},
// Deprecated. Use `off`
unsubscribe:function t(e,i){p.unsubscribeTo(this,e.toLowerCase())},
// Trigger an event of the given name
// A return value of `false` interrupts the callback chain
// Returns false if execution was interrupted
trigger:function t(e,i,r){i=i||this;var n=this._listeners&&this._listeners[e],s,a;if(n)for(var o=n.length;o--;)if(!1===(s=n[o].call(i,i,r)))return s;return!this.parent||this.parent.trigger(e,i,r)},asyncIsValid:function t(e,i){return h.warnOnce("asyncIsValid is deprecated; please use whenValid instead"),this.whenValid({group:e,force:i})},_findRelated:function t(){return this.options.multiple?p(this.parent.element.querySelectorAll("["+this.options.namespace+'multiple="'+this.options.multiple+'"]')):this.$element}};var l=function t(e,i){var r=e.match(/^\s*\[(.*)\]\s*$/);if(!r)throw'Requirement is not an array: "'+e+'"';var n=r[1].split(",").map(h.trimString);if(n.length!==i)throw"Requirement has "+n.length+" values when "+i+" are needed";return n},u=function t(e,i,r){var n=null,s={};for(var a in e)if(a){var o=r(a);"string"==typeof o&&(o=h.parseRequirement(e[a],o)),s[a]=o}else n=h.parseRequirement(e[a],i);return[n,s]},d=function t(e){p.extend(!0,this,e)};d.prototype={
// Returns `true` iff the given `value` is valid according the given requirements.
validate:function t(e,i){if(this.fn)// Skip first arg (value) and last (instance), combining the rest
// Legacy style validator
return 3<arguments.length&&(// If more args then value, requirement, instance...
i=[].slice.call(arguments,1,-1)),this.fn(e,i);if(Array.isArray(e)){if(!this.validateMultiple)throw"Validator `"+this.name+"` does not handle multiple values";return this.validateMultiple.apply(this,arguments)}var r=arguments[arguments.length-1];if(this.validateDate&&r._isDateInput())return null!==(e=h.parse.date(e))&&this.validateDate.apply(this,arguments);if(this.validateNumber)return!isNaN(e)&&(e=parseFloat(e),this.validateNumber.apply(this,arguments));if(this.validateString)return this.validateString.apply(this,arguments);throw"Validator `"+this.name+"` only handles multiple values"},
// Parses `requirements` into an array of arguments,
// according to `this.requirementType`
parseRequirements:function t(e,i){if("string"!=typeof e)
// Assume requirement already parsed
// but make sure we return an array
return Array.isArray(e)?e:[e];var r=this.requirementType;if(Array.isArray(r)){for(var n=l(e,r.length),s=0;s<n.length;s++)n[s]=h.parseRequirement(r[s],n[s]);return n}return p.isPlainObject(r)?u(r,e,i):[h.parseRequirement(r,e)]},
// Defaults:
requirementType:"string",priority:2};var c=function t(e,i){this.__class__="ValidatorRegistry",
// Default Parsley locale is en
this.locale="en",this.init(e||{},i||{})},f={email:/^((([a-zA-Z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-zA-Z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/,
// Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers
number:/^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,integer:/^-?\d+$/,digits:/^\d+$/,alphanum:/^\w+$/i,date:{test:function t(e){return null!==h.parse.date(e)}},url:new RegExp("^(?:(?:https?|ftp)://)?(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:/\\S*)?$")};f.range=f.number;
// See http://stackoverflow.com/a/10454560/8279
var m=function t(e){var i=(""+e).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);return i?Math.max(0,
// Number of digits right of decimal point.
(i[1]?i[1].length:0)-(
// Adjust for scientific notation.
i[2]?+i[2]:0)):0},g=function t(e,i){return i.map(h.parse[e])},v=function t(n,s){return function(t){for(var e=arguments.length,i=Array(1<e?e-1:0),r=1;r<e;r++)i[r-1]=arguments[r];// Get rid of `input` argument
return i.pop(),s.apply(void 0,[t].concat(_toConsumableArray(g(n,i))))}},y=function t(e){return{validateDate:v("date",e),validateNumber:v("number",e),requirementType:e.length<=2?"string":["string","string"],// Support operators with a 1 or 2 requirement(s)
priority:30}};
// parseArguments('number', ['1', '2']) => [1, 2]
c.prototype={init:function t(e,i){for(var r in this.catalog=i,
// Copy prototype's validators:
this.validators=_extends({},this.validators),e)this.addValidator(r,e[r].fn,e[r].priority);window.Parsley.trigger("parsley:validator:init")},
// Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n
setLocale:function t(e){if(void 0===this.catalog[e])throw new Error(e+" is not available in the catalog");return this.locale=e,this},
// Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`
addCatalog:function t(e,i,r){return"object"==typeof i&&(this.catalog[e]=i),!0===r?this.setLocale(e):this},
// Add a specific message for a given constraint in a given locale
addMessage:function t(e,i,r){return void 0===this.catalog[e]&&(this.catalog[e]={}),this.catalog[e][i]=r,this},
// Add messages for a given locale
addMessages:function t(e,i){for(var r in i)this.addMessage(e,r,i[r]);return this},
// Add a new validator
//
//    addValidator('custom', {
//        requirementType: ['integer', 'integer'],
//        validateString: function(value, from, to) {},
//        priority: 22,
//        messages: {
//          en: "Hey, that's no good",
//          fr: "Aye aye, pas bon du tout",
//        }
//    })
//
// Old API was addValidator(name, function, priority)
//
addValidator:function t(e,i,r){if(this.validators[e])h.warn('Validator "'+e+'" is already defined.');else if(a.hasOwnProperty(e))return void h.warn('"'+e+'" is a restricted keyword and is not a valid validator name.');return this._setValidator.apply(this,arguments)},hasValidator:function t(e){return!!this.validators[e]},updateValidator:function t(e,i,r){return this.validators[e]?this._setValidator.apply(this,arguments):(h.warn('Validator "'+e+'" is not already defined.'),this.addValidator.apply(this,arguments))},removeValidator:function t(e){return this.validators[e]||h.warn('Validator "'+e+'" is not defined.'),delete this.validators[e],this},_setValidator:function t(e,i,r){for(var n in"object"!=typeof i&&(
// Old style validator, with `fn` and `priority`
i={fn:i,priority:r}),i.validate||(i=new d(i)),(this.validators[e]=i).messages||{})this.addMessage(n,e,i.messages[n]);return this},getErrorMessage:function t(e){var i,r;
// Type constraints are a bit different, we have to match their requirements too to find right error message
"type"===e.name?i=(this.catalog[this.locale][e.name]||{})[e.requirements]:i=this.formatMessage(this.catalog[this.locale][e.name],e.requirements);return i||this.catalog[this.locale].defaultMessage||this.catalog.en.defaultMessage},
// Kind of light `sprintf()` implementation
formatMessage:function t(e,i){if("object"!=typeof i)return"string"==typeof e?e.replace(/%s/i,i):"";for(var r in i)e=this.formatMessage(e,i[r]);return e},
// Here is the Parsley default validators list.
// A validator is an object with the following key values:
//  - priority: an integer
//  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these
//  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise
// Alternatively, a validator can be a function that returns such an object
//
validators:{notblank:{validateString:function t(e){return/\S/.test(e)},priority:2},required:{validateMultiple:function t(e){return 0<e.length},validateString:function t(e){return/\S/.test(e)},priority:512},type:{validateString:function t(e,i,r){var n=arguments.length<=2||void 0===r?{}:r,s=n.step,a=void 0===s?"any":s,o=n.base,l=void 0===o?0:o,u=f[i];if(!u)throw new Error("validator type `"+i+"` is not supported");if(!u.test(e))return!1;if("number"===i&&!/^any$/i.test(a||"")){var d=Number(e),h=Math.max(m(a),m(l));if(m(d)>h)// Value can't have too many decimals
return!1;
// Be careful of rounding errors by using integers.
var p=function t(e){return Math.round(e*Math.pow(10,h))};if((p(d)-p(l))%p(a)!=0)return!1}return!0},requirementType:{"":"string",step:"string",base:"number"},priority:256},pattern:{validateString:function t(e,i){return i.test(e)},requirementType:"regexp",priority:64},minlength:{validateString:function t(e,i){return e.length>=i},requirementType:"integer",priority:30},maxlength:{validateString:function t(e,i){return e.length<=i},requirementType:"integer",priority:30},length:{validateString:function t(e,i,r){return e.length>=i&&e.length<=r},requirementType:["integer","integer"],priority:30},mincheck:{validateMultiple:function t(e,i){return e.length>=i},requirementType:"integer",priority:30},maxcheck:{validateMultiple:function t(e,i){return e.length<=i},requirementType:"integer",priority:30},check:{validateMultiple:function t(e,i,r){return e.length>=i&&e.length<=r},requirementType:["integer","integer"],priority:30},min:y(function(t,e){return e<=t}),max:y(function(t,e){return t<=e}),range:y(function(t,e,i){return e<=t&&t<=i}),equalto:{validateString:function t(e,i){var r=p(i);return r.length?e===r.val():e===i},priority:256}}};var _={},w=function t(e,i,r){for(var n=[],s=[],a=0;a<e.length;a++){for(var o=!1,l=0;l<i.length;l++)if(e[a].assert.name===i[l].assert.name){o=!0;break}o?s.push(e[a]):n.push(e[a])}return{kept:s,added:n,removed:r?[]:t(i,e,!0).added}};_.Form={_actualizeTriggers:function t(){var e=this;this.$element.on("submit.Parsley",function(t){e.onSubmitValidate(t)}),this.$element.on("click.Parsley",h._SubmitSelector,function(t){e.onSubmitButton(t)}),
// UI could be disabled
!1!==this.options.uiEnabled&&this.element.setAttribute("novalidate","")},focus:function t(){if(!(this._focusedField=null)===this.validationResult||"none"===this.options.focus)return null;for(var e=0;e<this.fields.length;e++){var i=this.fields[e];if(!0!==i.validationResult&&0<i.validationResult.length&&void 0===i.options.noFocus&&(this._focusedField=i.$element,"first"===this.options.focus))break}return null===this._focusedField?null:this._focusedField.focus()},_destroyUI:function t(){
// Reset all event listeners
this.$element.off(".Parsley")}},_.Field={_reflowUI:function t(){
// If this field doesn't have an active UI don't bother doing something
if(this._buildUI(),this._ui){
// Diff between two validation results
var e=w(this.validationResult,this._ui.lastValidationResult);
// Then store current validation result for next reflow
this._ui.lastValidationResult=this.validationResult,
// Handle valid / invalid / none field class
this._manageStatusClass(),
// Add, remove, updated errors messages
this._manageErrorsMessages(e),
// Triggers impl
this._actualizeTriggers(),
// If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user
!e.kept.length&&!e.added.length||this._failedOnce||(this._failedOnce=!0,this._actualizeTriggers())}},
// Returns an array of field's error message(s)
getErrorsMessages:function t(){
// No error message, field is valid
if(!0===this.validationResult)return[];for(var e=[],i=0;i<this.validationResult.length;i++)e.push(this.validationResult[i].errorMessage||this._getErrorMessage(this.validationResult[i].assert));return e},
// It's a goal of Parsley that this method is no longer required [#1073]
addError:function t(e,i){var r=arguments.length<=1||void 0===i?{}:i,n=r.message,s=r.assert,a=r.updateClass,o=void 0===a||a;this._buildUI(),this._addError(e,{message:n,assert:s}),o&&this._errorClass()},
// It's a goal of Parsley that this method is no longer required [#1073]
updateError:function t(e,i){var r=arguments.length<=1||void 0===i?{}:i,n=r.message,s=r.assert,a=r.updateClass,o=void 0===a||a;this._buildUI(),this._updateError(e,{message:n,assert:s}),o&&this._errorClass()},
// It's a goal of Parsley that this method is no longer required [#1073]
removeError:function t(e,i){var r,n=(arguments.length<=1||void 0===i?{}:i).updateClass,s=void 0===n||n;this._buildUI(),this._removeError(e),
// edge case possible here: remove a standard Parsley error that is still failing in this.validationResult
// but highly improbable cuz' manually removing a well Parsley handled error makes no sense.
s&&this._manageStatusClass()},_manageStatusClass:function t(){this.hasConstraints()&&this.needsValidation()&&!0===this.validationResult?this._successClass():0<this.validationResult.length?this._errorClass():this._resetClass()},_manageErrorsMessages:function t(e){if(void 0===this.options.errorsMessagesDisabled){
// Case where we have errorMessage option that configure an unique field error message, regardless failing validators
if(void 0!==this.options.errorMessage)return e.added.length||e.kept.length?(this._insertErrorWrapper(),0===this._ui.$errorsWrapper.find(".parsley-custom-error-message").length&&this._ui.$errorsWrapper.append(p(this.options.errorTemplate).addClass("parsley-custom-error-message")),this._ui.$errorsWrapper.addClass("filled").find(".parsley-custom-error-message").html(this.options.errorMessage)):this._ui.$errorsWrapper.removeClass("filled").find(".parsley-custom-error-message").remove();
// Show, hide, update failing constraints messages
for(var i=0;i<e.removed.length;i++)this._removeError(e.removed[i].assert.name);for(i=0;i<e.added.length;i++)this._addError(e.added[i].assert.name,{message:e.added[i].errorMessage,assert:e.added[i].assert});for(i=0;i<e.kept.length;i++)this._updateError(e.kept[i].assert.name,{message:e.kept[i].errorMessage,assert:e.kept[i].assert})}},_addError:function t(e,i){var r=i.message,n=i.assert;this._insertErrorWrapper(),this._ui.$errorClassHandler.attr("aria-describedby",this._ui.errorsWrapperId),this._ui.$errorsWrapper.addClass("filled").append(p(this.options.errorTemplate).addClass("parsley-"+e).html(r||this._getErrorMessage(n)))},_updateError:function t(e,i){var r=i.message,n=i.assert;this._ui.$errorsWrapper.addClass("filled").find(".parsley-"+e).html(r||this._getErrorMessage(n))},_removeError:function t(e){this._ui.$errorClassHandler.removeAttr("aria-describedby"),this._ui.$errorsWrapper.removeClass("filled").find(".parsley-"+e).remove()},_getErrorMessage:function t(e){var i=e.name+"Message";return void 0!==this.options[i]?window.Parsley.formatMessage(this.options[i],e.requirements):window.Parsley.getErrorMessage(e)},_buildUI:function t(){
// UI could be already built or disabled
if(!this._ui&&!1!==this.options.uiEnabled){var e={};
// Give field its Parsley id in DOM
this.element.setAttribute(this.options.namespace+"id",this.__id__),
/** Generate important UI elements and store them in this **/
// $errorClassHandler is the $element that woul have parsley-error and parsley-success classes
e.$errorClassHandler=this._manageClassHandler(),
// $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer
e.errorsWrapperId="parsley-id-"+(this.options.multiple?"multiple-"+this.options.multiple:this.__id__),e.$errorsWrapper=p(this.options.errorsWrapper).attr("id",e.errorsWrapperId),
// ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly
e.lastValidationResult=[],e.validationInformationVisible=!1,
// Store it in this for later
this._ui=e}},
// Determine which element will have `parsley-error` and `parsley-success` classes
_manageClassHandler:function t(){
// Class handled could also be determined by function given in Parsley options
if("string"==typeof this.options.classHandler&&p(this.options.classHandler).length)return p(this.options.classHandler);
// Class handled could also be determined by function given in Parsley options
var e=this.options.classHandler;
// It might also be the function name of a global function
if("string"==typeof this.options.classHandler&&"function"==typeof window[this.options.classHandler]&&(e=window[this.options.classHandler]),"function"==typeof e){var i=e.call(this,this);
// If this function returned a valid existing DOM element, go for it
if(void 0!==i&&i.length)return i}else{if("object"==typeof e&&e instanceof jQuery&&e.length)return e;e&&h.warn("The class handler `"+e+"` does not exist in DOM nor as a global JS function")}return this._inputHolder()},_inputHolder:function t(){
// if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container
return this.options.multiple&&"SELECT"!==this.element.nodeName?this.$element.parent():this.$element;
// But if multiple element (radio, checkbox), that would be their parent
},_insertErrorWrapper:function t(){var e=this.options.errorsContainer;
// Nothing to do if already inserted
if(0!==this._ui.$errorsWrapper.parent().length)return this._ui.$errorsWrapper.parent();if("string"==typeof e){if(p(e).length)return p(e).append(this._ui.$errorsWrapper);"function"==typeof window[e]?e=window[e]:h.warn("The errors container `"+e+"` does not exist in DOM nor as a global JS function")}return"function"==typeof e&&(e=e.call(this,this)),"object"==typeof e&&e.length?e.append(this._ui.$errorsWrapper):this._inputHolder().after(this._ui.$errorsWrapper)},_actualizeTriggers:function t(){var e=this,i=this._findRelated(),r;
// Remove Parsley events already bound on this field
i.off(".Parsley"),this._failedOnce?i.on(h.namespaceEvents(this.options.triggerAfterFailure,"Parsley"),function(){e._validateIfNeeded()}):(r=h.namespaceEvents(this.options.trigger,"Parsley"))&&i.on(r,function(t){e._validateIfNeeded(t)})},_validateIfNeeded:function t(e){var i=this;
// For keyup, keypress, keydown, input... events that could be a little bit obstrusive
// do not validate if val length < min threshold on first validation. Once field have been validated once and info
// about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.
e&&/key|input/.test(e.type)&&(!this._ui||!this._ui.validationInformationVisible)&&this.getValue().length<=this.options.validationThreshold||(this.options.debounce?(window.clearTimeout(this._debounced),this._debounced=window.setTimeout(function(){return i.validate()},this.options.debounce)):this.validate())},_resetUI:function t(){
// Reset all event listeners
this._failedOnce=!1,this._actualizeTriggers(),
// Nothing to do if UI never initialized for this field
void 0!==this._ui&&(
// Reset all errors' li
this._ui.$errorsWrapper.removeClass("filled").children().remove(),
// Reset validation class
this._resetClass(),
// Reset validation flags and last validation result
this._ui.lastValidationResult=[],this._ui.validationInformationVisible=!1)},_destroyUI:function t(){this._resetUI(),void 0!==this._ui&&this._ui.$errorsWrapper.remove(),delete this._ui},_successClass:function t(){this._ui.validationInformationVisible=!0,this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass)},_errorClass:function t(){this._ui.validationInformationVisible=!0,this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass)},_resetClass:function t(){this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass)}};var b=function t(e,i,r){this.__class__="Form",this.element=e,this.$element=p(e),this.domOptions=i,this.options=r,this.parent=window.Parsley,this.fields=[],this.validationResult=null},F={pending:null,resolved:!0,rejected:!1};b.prototype={onSubmitValidate:function t(e){var i=this;
// This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior
if(!0!==e.parsley){
// If we didn't come here through a submit button, use the first one in the form
var r=this._submitSource||this.$element.find(h._SubmitSelector)[0];if(this._submitSource=null,this.$element.find(".parsley-synthetic-submit-button").prop("disabled",!0),!r||null===r.getAttribute("formnovalidate")){window.Parsley._remoteCache={};var n=this.whenValidate({event:e});"resolved"===n.state()&&!1!==this._trigger("submit")||(
// Rejected or pending: cancel this submit
e.stopImmediatePropagation(),e.preventDefault(),"pending"===n.state()&&n.done(function(){i._submit(r)}))}}},onSubmitButton:function t(e){this._submitSource=e.currentTarget},
// internal
// _submit submits the form, this time without going through the validations.
// Care must be taken to "fake" the actual submit button being clicked.
_submit:function t(e){if(!1!==this._trigger("submit")){
// Add submit button's data
if(e){var i=this.$element.find(".parsley-synthetic-submit-button").prop("disabled",!1);0===i.length&&(i=p('<input class="parsley-synthetic-submit-button" type="hidden">').appendTo(this.$element)),i.attr({name:e.getAttribute("name"),value:e.getAttribute("value")})}this.$element.trigger(_extends(p.Event("submit"),{parsley:!0}))}},
// Performs validation on fields while triggering events.
// @returns `true` if all validations succeeds, `false`
// if a failure is immediately detected, or `null`
// if dependant on a promise.
// Consider using `whenValidate` instead.
validate:function t(e){if(1<=arguments.length&&!p.isPlainObject(e)){h.warnOnce("Calling validate on a parsley form without passing arguments as an object is deprecated.");var i=_slice.call(arguments),r,n,s;e={group:i[0],force:i[1],event:i[2]}}return F[this.whenValidate(e).state()]},whenValidate:function t(e){var i,r=this,n=arguments.length<=0||void 0===e?{}:e,s=n.group,a=n.force,o=n.event;(this.submitEvent=o)&&(this.submitEvent=_extends({},o,{preventDefault:function t(){h.warnOnce("Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`"),r.validationResult=!1}})),this.validationResult=!0,
// fire validate event to eventually modify things before every validation
this._trigger("validate"),
// Refresh form DOM options and form's fields that could have changed
this._refreshFields();var l=this._withoutReactualizingFormOptions(function(){return p.map(r.fields,function(t){return t.whenValidate({force:a,group:s})})});return(i=h.all(l).done(function(){r._trigger("success")}).fail(function(){r.validationResult=!1,r.focus(),r._trigger("error")}).always(function(){r._trigger("validated")})).pipe.apply(i,_toConsumableArray(this._pipeAccordingToValidationResult()))},
// Iterate over refreshed fields, and stop on first failure.
// Returns `true` if all fields are valid, `false` if a failure is detected
// or `null` if the result depends on an unresolved promise.
// Prefer using `whenValid` instead.
isValid:function t(e){if(1<=arguments.length&&!p.isPlainObject(e)){h.warnOnce("Calling isValid on a parsley form without passing arguments as an object is deprecated.");var i=_slice.call(arguments),r,n;e={group:i[0],force:i[1]}}return F[this.whenValid(e).state()]},
// Iterate over refreshed fields and validate them.
// Returns a promise.
// A validation that immediately fails will interrupt the validations.
whenValid:function t(e){var i=this,r=arguments.length<=0||void 0===e?{}:e,n=r.group,s=r.force;this._refreshFields();var a=this._withoutReactualizingFormOptions(function(){return p.map(i.fields,function(t){return t.whenValid({group:n,force:s})})});return h.all(a)},refresh:function t(){return this._refreshFields(),this},
// Reset UI
reset:function t(){
// Form case: emit a reset event for each field
for(var e=0;e<this.fields.length;e++)this.fields[e].reset();this._trigger("reset")},
// Destroy Parsley instance (+ UI)
destroy:function t(){
// Field case: emit destroy event to clean UI and then destroy stored instance
this._destroyUI();
// Form case: destroy all its fields and then destroy stored instance
for(var e=0;e<this.fields.length;e++)this.fields[e].destroy();this.$element.removeData("Parsley"),this._trigger("destroy")},_refreshFields:function t(){return this.actualizeOptions()._bindFields()},_bindFields:function t(){var n=this,e=this.fields;return this.fields=[],this.fieldsMappedById={},this._withoutReactualizingFormOptions(function(){n.$element.find(n.options.inputs).not(n.options.excluded).each(function(t,e){var i=new window.Parsley.Factory(e,{},n);
// Only add valid and not excluded `Field` and `FieldMultiple` children
if(("Field"===i.__class__||"FieldMultiple"===i.__class__)&&!0!==i.options.excluded){var r=i.__class__+"-"+i.__id__;void 0===n.fieldsMappedById[r]&&(n.fieldsMappedById[r]=i,n.fields.push(i))}}),p.each(h.difference(e,n.fields),function(t,e){e.reset()})}),this},
// Internal only.
// Looping on a form's fields to do validation or similar
// will trigger reactualizing options on all of them, which
// in turn will reactualize the form's options.
// To avoid calling actualizeOptions so many times on the form
// for nothing, _withoutReactualizingFormOptions temporarily disables
// the method actualizeOptions on this form while `fn` is called.
_withoutReactualizingFormOptions:function t(e){var i=this.actualizeOptions;this.actualizeOptions=function(){return this};var r=e();return this.actualizeOptions=i,r},
// Internal only.
// Shortcut to trigger an event
// Returns true iff event is not interrupted and default not prevented.
_trigger:function t(e){return this.trigger("form:"+e)}};var C=function t(e,i,r,n,s){var a=window.Parsley._validatorRegistry.validators[i],o=new d(a);n=n||e.options[i+"Priority"]||o.priority,_extends(this,{validator:o,name:i,requirements:r,priority:n,isDomConstraint:s=!0===s}),this._parseRequirements(e.options)},A=function t(e){var i;return e[0].toUpperCase()+e.slice(1)},E=function t(e,i,r,n){this.__class__="Field",this.element=e,this.$element=p(e),
// Set parent if we have one
void 0!==n&&(this.parent=n),this.options=r,this.domOptions=i,
// Initialize some properties
this.constraints=[],this.constraintsByName={},this.validationResult=!0,
// Bind constraints
this._bindConstraints()},x={pending:null,resolved:!0,rejected:!(C.prototype={validate:function t(e,i){var r;return(r=this.validator).validate.apply(r,[e].concat(_toConsumableArray(this.requirementList),[i]))},_parseRequirements:function t(e){var i=this;this.requirementList=this.validator.parseRequirements(this.requirements,function(t){return e[i.name+A(t)]})}})};E.prototype={
// # Public API
// Validate field and trigger some events for mainly `UI`
// @returns `true`, an array of the validators that failed, or
// `null` if validation is not finished. Prefer using whenValidate
validate:function t(e){1<=arguments.length&&!p.isPlainObject(e)&&(h.warnOnce("Calling validate on a parsley field without passing arguments as an object is deprecated."),e={options:e});var i=this.whenValidate(e);if(!i)// If excluded with `group` option
return!0;switch(i.state()){case"pending":return null;case"resolved":return!0;case"rejected":return this.validationResult}},
// Validate field and trigger some events for mainly `UI`
// @returns a promise that succeeds only when all validations do
// or `undefined` if field is not in the given `group`.
whenValidate:function t(e){var i,r=this,n=arguments.length<=0||void 0===e?{}:e,s=n.force,a=n.group;if(
// do not validate a field if not the same as given validation group
this.refresh(),!a||this._isInGroup(a))return this.value=this.getValue(),
// Field Validate event. `this.value` could be altered for custom needs
this._trigger("validate"),(i=this.whenValid({force:s,value:this.value,_refreshed:!0}).always(function(){r._reflowUI()}).done(function(){r._trigger("success")}).fail(function(){r._trigger("error")}).always(function(){r._trigger("validated")})).pipe.apply(i,_toConsumableArray(this._pipeAccordingToValidationResult()))},hasConstraints:function t(){return 0!==this.constraints.length},
// An empty optional field does not need validation
needsValidation:function t(e){
// If a field is empty and not required, it is valid
// Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators
return void 0===e&&(e=this.getValue()),!(!e.length&&!this._isRequired()&&void 0===this.options.validateIfEmpty)},_isInGroup:function t(e){return Array.isArray(this.options.group)?-1!==p.inArray(e,this.options.group):this.options.group===e},
// Just validate field. Do not trigger any event.
// Returns `true` iff all constraints pass, `false` if there are failures,
// or `null` if the result can not be determined yet (depends on a promise)
// See also `whenValid`.
isValid:function t(e){if(1<=arguments.length&&!p.isPlainObject(e)){h.warnOnce("Calling isValid on a parsley field without passing arguments as an object is deprecated.");var i=_slice.call(arguments),r,n;e={force:i[0],value:i[1]}}var s=this.whenValid(e);return!s||x[s.state()]},
// Just validate field. Do not trigger any event.
// @returns a promise that succeeds only when all validations do
// or `undefined` if the field is not in the given `group`.
// The argument `force` will force validation of empty fields.
// If a `value` is given, it will be validated instead of the value of the input.
whenValid:function t(e){var r=this,i=arguments.length<=0||void 0===e?{}:e,n=i.force,s=void 0!==n&&n,a=i.value,o=i.group,l;
// do not validate a field if not the same as given validation group
if(
// Recompute options and rebind constraints to have latest changes
i._refreshed||this.refresh(),!o||this._isInGroup(o)){
// A field without constraint is valid
if(this.validationResult=!0,!this.hasConstraints())return p.when();
// Value could be passed as argument, needed to add more power to 'field:validate'
if(null==a&&(a=this.getValue()),!this.needsValidation(a)&&!0!==s)return p.when();var u=this._getGroupedConstraints(),d=[];return p.each(u,function(t,e){
// Process one group of constraints at a time, we validate the constraints
// and combine the promises together.
var i=h.all(p.map(e,function(t){return r._validateConstraint(a,t)}));if(d.push(i),"rejected"===i.state())return!1;// Interrupt processing if a group has already failed
}),h.all(d)}},
// @returns a promise
_validateConstraint:function t(e,i){var r=this,n=i.validate(e,this);
// Make sure we return a promise and that we record failures
// Map false to a failed promise
return!1===n&&(n=p.Deferred().reject()),h.all([n]).fail(function(t){r.validationResult instanceof Array||(r.validationResult=[]),r.validationResult.push({assert:i,errorMessage:"string"==typeof t&&t})})},
// @returns Parsley field computed value that could be overrided or configured in DOM
getValue:function t(){var e;
// Value could be overriden in DOM or with explicit options
// Handle wrong DOM or configurations
return null==(e="function"==typeof this.options.value?this.options.value(this):void 0!==this.options.value?this.options.value:this.$element.val())?"":this._handleWhitespace(e)},
// Reset UI
reset:function t(){return this._resetUI(),this._trigger("reset")},
// Destroy Parsley instance (+ UI)
destroy:function t(){
// Field case: emit destroy event to clean UI and then destroy stored instance
this._destroyUI(),this.$element.removeData("Parsley"),this.$element.removeData("FieldMultiple"),this._trigger("destroy")},
// Actualize options and rebind constraints
refresh:function t(){return this._refreshConstraints(),this},_refreshConstraints:function t(){return this.actualizeOptions()._bindConstraints()},refreshConstraints:function t(){return h.warnOnce("Parsley's refreshConstraints is deprecated. Please use refresh"),this.refresh()},
/**
    * Add a new constraint to a field
    *
    * @param {String}   name
    * @param {Mixed}    requirements      optional
    * @param {Number}   priority          optional
    * @param {Boolean}  isDomConstraint   optional
    */
addConstraint:function t(e,i,r,n){if(window.Parsley._validatorRegistry.validators[e]){var s=new C(this,e,i,r,n);
// if constraint already exist, delete it and push new version
"undefined"!==this.constraintsByName[s.name]&&this.removeConstraint(s.name),this.constraints.push(s),this.constraintsByName[s.name]=s}return this},
// Remove a constraint
removeConstraint:function t(e){for(var i=0;i<this.constraints.length;i++)if(e===this.constraints[i].name){this.constraints.splice(i,1);break}return delete this.constraintsByName[e],this},
// Update a constraint (Remove + re-add)
updateConstraint:function t(e,i,r){return this.removeConstraint(e).addConstraint(e,i,r)},
// # Internals
// Internal only.
// Bind constraints from config + options + DOM
_bindConstraints:function t(){
// clean all existing DOM constraints to only keep javascript user constraints
for(var e=[],i={},r=0;r<this.constraints.length;r++)!1===this.constraints[r].isDomConstraint&&(e.push(this.constraints[r]),i[this.constraints[r].name]=this.constraints[r]);
// then re-add Parsley DOM-API constraints
for(var n in this.constraints=e,this.constraintsByName=i,this.options)this.addConstraint(n,this.options[n],void 0,!0);
// finally, bind special HTML5 constraints
return this._bindHtml5Constraints()},
// Internal only.
// Bind specific HTML5 constraints to be HTML5 compliant
_bindHtml5Constraints:function t(){
// html5 required
null!==this.element.getAttribute("required")&&this.addConstraint("required",!0,void 0,!0),
// html5 pattern
null!==this.element.getAttribute("pattern")&&this.addConstraint("pattern",this.element.getAttribute("pattern"),void 0,!0);
// range
var e=this.element.getAttribute("min"),i=this.element.getAttribute("max");null!==e&&null!==i?this.addConstraint("range",[e,i],void 0,!0):null!==e?this.addConstraint("min",e,void 0,!0):null!==i&&this.addConstraint("max",i,void 0,!0),
// length
null!==this.element.getAttribute("minlength")&&null!==this.element.getAttribute("maxlength")?this.addConstraint("length",[this.element.getAttribute("minlength"),this.element.getAttribute("maxlength")],void 0,!0):null!==this.element.getAttribute("minlength")?this.addConstraint("minlength",this.element.getAttribute("minlength"),void 0,!0):null!==this.element.getAttribute("maxlength")&&this.addConstraint("maxlength",this.element.getAttribute("maxlength"),void 0,!0);
// html5 types
var r=h.getType(this.element);
// Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise
return"number"===r?this.addConstraint("type",["number",{step:this.element.getAttribute("step")||"1",base:e||this.element.getAttribute("value")}],void 0,!0):/^(email|url|range|date)$/i.test(r)?this.addConstraint("type",r,void 0,!0):this},
// Internal only.
// Field is required if have required constraint without `false` value
_isRequired:function t(){return void 0!==this.constraintsByName.required&&!1!==this.constraintsByName.required.requirements},
// Internal only.
// Shortcut to trigger an event
_trigger:function t(e){return this.trigger("field:"+e)},
// Internal only
// Handles whitespace in a value
// Use `data-parsley-whitespace="squish"` to auto squish input value
// Use `data-parsley-whitespace="trim"` to auto trim input value
_handleWhitespace:function t(e){return!0===this.options.trimValue&&h.warnOnce('data-parsley-trim-value="true" is deprecated, please use data-parsley-whitespace="trim"'),"squish"===this.options.whitespace&&(e=e.replace(/\s{2,}/g," ")),"trim"!==this.options.whitespace&&"squish"!==this.options.whitespace&&!0!==this.options.trimValue||(e=h.trimString(e)),e},_isDateInput:function t(){var e=this.constraintsByName.type;return e&&"date"===e.requirements},
// Internal only.
// Returns the constraints, grouped by descending priority.
// The result is thus an array of arrays of constraints.
_getGroupedConstraints:function t(){if(!1===this.options.priorityEnabled)return[this.constraints];
// Create array unique of priorities
for(var e=[],i={},r=0;r<this.constraints.length;r++){var n=this.constraints[r].priority;i[n]||e.push(i[n]=[]),i[n].push(this.constraints[r])}
// Sort them by priority DESC
return e.sort(function(t,e){return e[0].priority-t[0].priority}),e}};var $=E,P=function t(){this.__class__="FieldMultiple"};P.prototype={
// Add new `$element` sibling for multiple field
addElement:function t(e){return this.$elements.push(e),this},
// See `Field._refreshConstraints()`
_refreshConstraints:function t(){var e;
// Select multiple special treatment
if(this.constraints=[],"SELECT"===this.element.nodeName)return this.actualizeOptions()._bindConstraints(),this;
// Gather all constraints for each input in the multiple group
for(var i=0;i<this.$elements.length;i++)
// Check if element have not been dynamically removed since last binding
if(p("html").has(this.$elements[i]).length){e=this.$elements[i].data("FieldMultiple")._refreshConstraints().constraints;for(var r=0;r<e.length;r++)this.addConstraint(e[r].name,e[r].requirements,e[r].priority,e[r].isDomConstraint)}else this.$elements.splice(i,1);return this},
// See `Field.getValue()`
getValue:function t(){
// Value could be overriden in DOM
if("function"==typeof this.options.value)return this.options.value(this);
// Radio input case
if(void 0!==this.options.value)return this.options.value;if("INPUT"===this.element.nodeName){var e=h.getType(this.element);if("radio"===e)return this._findRelated().filter(":checked").val()||"";
// checkbox input case
if("checkbox"===e){var i=[];return this._findRelated().filter(":checked").each(function(){i.push(p(this).val())}),i}}
// Select multiple case
return"SELECT"===this.element.nodeName&&null===this.$element.val()?[]:this.$element.val();
// Default case that should never happen
},_init:function t(){return this.$elements=[this.$element],this}};var V=function t(e,i,r){this.element=e,this.$element=p(e);
// If the element has already been bound, returns its saved Parsley instance
var n=this.$element.data("Parsley");if(n)
// If the saved instance has been bound without a Form parent and there is one given in this call, add it
return void 0!==r&&n.parent===window.Parsley&&(n.parent=r,n._resetOptions(n.options)),"object"==typeof i&&_extends(n.options,i),n;
// Parsley must be instantiated with a DOM element or jQuery $element
if(!this.$element.length)throw new Error("You must bind Parsley on an existing element.");if(void 0!==r&&"Form"!==r.__class__)throw new Error("Parent instance must be a Form instance");return this.parent=r||window.Parsley,this.init(i)};V.prototype={init:function t(e){
// A Form instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute
return this.__class__="Parsley",this.__version__="2.8.1",this.__id__=h.generateID(),
// Pre-compute options
this._resetOptions(e),"FORM"===this.element.nodeName||h.checkAttr(this.element,this.options.namespace,"validate")&&!this.$element.is(this.options.inputs)?this.bind("parsleyForm"):this.isMultiple()?this.handleMultiple():this.bind("parsleyField");
// Every other element is bound as a `Field` or `FieldMultiple`
},isMultiple:function t(){var e=h.getType(this.element);return"radio"===e||"checkbox"===e||"SELECT"===this.element.nodeName&&null!==this.element.getAttribute("multiple")},
// Multiples fields are a real nightmare :(
// Maybe some refactoring would be appreciated here...
handleMultiple:function t(){var r=this,e,i,n;
// Special select multiple input
if(
// Handle multiple name
this.options.multiple=this.options.multiple||(e=this.element.getAttribute("name"))||this.element.getAttribute("id"),"SELECT"===this.element.nodeName&&null!==this.element.getAttribute("multiple"))return this.options.multiple=this.options.multiple||this.__id__,this.bind("parsleyFieldMultiple");
// Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it
// Remove special chars
if(!this.options.multiple)return h.warn("To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.",this.$element),this;this.options.multiple=this.options.multiple.replace(/(:|\.|\[|\]|\{|\}|\$)/g,""),
// Add proper `data-parsley-multiple` to siblings if we have a valid multiple name
e&&p('input[name="'+e+'"]').each(function(t,e){var i=h.getType(e);"radio"!==i&&"checkbox"!==i||e.setAttribute(r.options.namespace+"multiple",r.options.multiple)});for(
// Check here if we don't already have a related multiple instance saved
var s=this._findRelated(),a=0;a<s.length;a++)if(void 0!==(n=p(s.get(a)).data("Parsley"))){this.$element.data("FieldMultiple")||n.addElement(this.$element);break}
// Create a secret Field instance for every multiple field. It will be stored in `data('FieldMultiple')`
// And will be useful later to access classic `Field` stuff while being in a `FieldMultiple` instance
return this.bind("parsleyField",!0),n||this.bind("parsleyFieldMultiple")},
// Return proper `Form`, `Field` or `FieldMultiple`
bind:function t(e,i){var r;switch(e){case"parsleyForm":r=p.extend(new b(this.element,this.domOptions,this.options),new o,window.ParsleyExtend)._bindFields();break;case"parsleyField":r=p.extend(new $(this.element,this.domOptions,this.options,this.parent),new o,window.ParsleyExtend);break;case"parsleyFieldMultiple":r=p.extend(new $(this.element,this.domOptions,this.options,this.parent),new P,new o,window.ParsleyExtend)._init();break;default:throw new Error(e+"is not a supported Parsley type")}return this.options.multiple&&h.setAttr(this.element,this.options.namespace,"multiple",this.options.multiple),void 0!==i?this.$element.data("FieldMultiple",r):(
// Store the freshly bound instance in a DOM element for later access using jQuery `data()`
this.$element.data("Parsley",r),
// Tell the world we have a new Form or Field instance!
r._actualizeTriggers(),r._trigger("init")),r}};var T=p.fn.jquery.split(".");if(parseInt(T[0])<=1&&parseInt(T[1])<8)throw"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.";T.forEach||h.warn("Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim");
// Inherit `on`, `off` & `trigger` to Parsley:
var O=_extends(new o,{element:document,$element:p(document),actualizeOptions:null,_resetOptions:null,Factory:V,version:"2.8.1"});
// Supplement Field and Form with Base
// This way, the constructors will have access to those methods
_extends($.prototype,_.Field,o.prototype),_extends(b.prototype,_.Form,o.prototype),
// Inherit actualizeOptions and _resetOptions:
_extends(V.prototype,o.prototype),
// ### jQuery API
// `$('.elem').parsley(options)` or `$('.elem').psly(options)`
p.fn.parsley=p.fn.psly=function(t){if(1<this.length){var e=[];return this.each(function(){e.push(p(this).parsley(t))}),e}
// Return undefined if applied to non existing DOM element
if(0!=this.length)return new V(this[0],t)},
// ### Field and Form extension
// Ensure the extension is now defined if it wasn't previously
void 0===window.ParsleyExtend&&(window.ParsleyExtend={}),
// ### Parsley config
// Inherit from ParsleyDefault, and copy over any existing values
O.options=_extends(h.objectCreate(a),window.ParsleyConfig),window.ParsleyConfig=O.options,// Old way of accessing global options
// ### Globals
window.Parsley=window.psly=O,O.Utils=h,window.ParsleyUtils={},p.each(h,function(t,e){"function"==typeof e&&(window.ParsleyUtils[t]=function(){return h.warnOnce("Accessing `window.ParsleyUtils` is deprecated. Use `window.Parsley.Utils` instead."),h[t].apply(h,arguments)})});
// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley
var M=window.Parsley._validatorRegistry=new c(window.ParsleyConfig.validators,window.ParsleyConfig.i18n);window.ParsleyValidator={},p.each("setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator hasValidator".split(" "),function(t,e){window.Parsley[e]=function(){return M[e].apply(M,arguments)},window.ParsleyValidator[e]=function(){var t;return h.warnOnce("Accessing the method '"+e+"' through Validator is deprecated. Simply call 'window.Parsley."+e+"(...)'"),(t=window.Parsley)[e].apply(t,arguments)}}),
// ### UI
// Deprecated global object
window.Parsley.UI=_,window.ParsleyUI={removeError:function t(e,i,r){var n=!0!==r;return h.warnOnce("Accessing UI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method."),e.removeError(i,{updateClass:n})},getErrorsMessages:function t(e){return h.warnOnce("Accessing UI is deprecated. Call 'getErrorsMessages' on the instance directly."),e.getErrorsMessages()}},p.each("addError updateError".split(" "),function(t,a){window.ParsleyUI[a]=function(t,e,i,r,n){var s=!0!==n;return h.warnOnce("Accessing UI is deprecated. Call '"+a+"' on the instance directly. Please comment in issue 1073 as to your need to call this method."),t[a](e,{message:i,assert:r,updateClass:s})}}),
// ### PARSLEY auto-binding
// Prevent it by setting `ParsleyConfig.autoBind` to `false`
!1!==window.ParsleyConfig.autoBind&&p(function(){
// Works only on `data-parsley-validate`.
p("[data-parsley-validate]").length&&p("[data-parsley-validate]").parsley()});var R=p({}),D=function t(){h.warnOnce("Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley")},I="parsley:";p.listen=function(t,e,i){var r;if(D(),"object"==typeof arguments[1]&&"function"==typeof i&&(r=arguments[1],e=i),"function"!=typeof e)throw new Error("Wrong parameters");window.Parsley.on(s(t),n(e,r))},p.listenTo=function(t,e,i){if(D(),!(t instanceof $||t instanceof b))throw new Error("Must give Parsley instance");if("string"!=typeof e||"function"!=typeof i)throw new Error("Wrong parameters");t.on(s(e),n(i))},p.unsubscribe=function(t,e){if(D(),"string"!=typeof t||"function"!=typeof e)throw new Error("Wrong arguments");window.Parsley.off(s(t),e.parsleyAdaptedCallback)},p.unsubscribeTo=function(t,e){if(D(),!(t instanceof $||t instanceof b))throw new Error("Must give Parsley instance");t.off(s(e))},p.unsubscribeAll=function(e){D(),window.Parsley.off(s(e)),p("form,input,textarea,select").each(function(){var t=p(this).data("Parsley");t&&t.off(s(e))})},
// $.emit is deprecated. Use jQuery events instead.
p.emit=function(t,e){var i;D();var r=e instanceof $||e instanceof b,n=Array.prototype.slice.call(arguments,r?2:1);n.unshift(s(t)),r||(e=window.Parsley),(i=e).trigger.apply(i,_toConsumableArray(n))};var q={},S,k;return p.extend(!0,O,{asyncValidators:{default:{fn:function t(e){
// By default, only status 2xx are deemed successful.
// Note: we use status instead of state() because responses with status 200
// but invalid messages (e.g. an empty body for content type set to JSON) will
// result in state() === 'rejected'.
return 200<=e.status&&e.status<300},url:!1},reverse:{fn:function t(e){
// If reverse option is set, a failing ajax request is considered successful
return e.status<200||300<=e.status},url:!1}},addAsyncValidator:function t(e,i,r,n){return O.asyncValidators[e]={fn:i,url:r||!1,options:n||{}},this}}),O.addValidator("remote",{requirementType:{"":"string",validator:"string",reverse:"boolean",options:"object"},validateString:function t(e,i,r,n){var s={},a,o,l=r.validator||(!0===r.reverse?"reverse":"default");if(void 0===O.asyncValidators[l])throw new Error("Calling an undefined async validator: `"+l+"`");
// Fill current value
-1<(i=O.asyncValidators[l].url||i).indexOf("{value}")?i=i.replace("{value}",encodeURIComponent(e)):s[n.element.getAttribute("name")||n.element.getAttribute("id")]=e;
// Merge options passed in from the function with the ones in the attribute
var u=p.extend(!0,r.options||{},O.asyncValidators[l].options);
// All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`
a=p.extend(!0,{},{url:i,data:s,type:"GET"},u),
// Generate store key based on ajax options
n.trigger("field:ajaxoptions",n,a),o=p.param(a),
// Initialise querry cache
void 0===O._remoteCache&&(O._remoteCache={});
// Try to retrieve stored xhr
var d=O._remoteCache[o]=O._remoteCache[o]||p.ajax(a),h=function t(){var e=O.asyncValidators[l].fn.call(n,d,i,r);return e||(// Map falsy results to rejected promise
e=p.Deferred().reject()),p.when(e)};return d.then(h,h)},priority:-1}),O.on("form:submit",function(){O._remoteCache={}}),o.prototype.addAsyncValidator=function(){return h.warnOnce("Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`"),O.addAsyncValidator.apply(O,arguments)},
// This is included with the Parsley library itself,
// thus there is no use in adding it to your project.
O.addMessages("en",{defaultMessage:"This value seems to be invalid.",type:{email:"This value should be a valid email.",url:"This value should be a valid url.",number:"This value should be a valid number.",integer:"This value should be a valid integer.",digits:"This value should be digits.",alphanum:"This value should be alphanumeric."},notblank:"This value should not be blank.",required:"This value is required.",pattern:"This value seems to be invalid.",min:"This value should be greater than or equal to %s.",max:"This value should be lower than or equal to %s.",range:"This value should be between %s and %s.",minlength:"This value is too short. It should have %s characters or more.",maxlength:"This value is too long. It should have %s characters or fewer.",length:"This value length is invalid. It should be between %s and %s characters long.",mincheck:"You must select at least %s choices.",maxcheck:"You must select %s choices or fewer.",check:"You must select between %s and %s choices.",equalto:"This value should be the same."}),O.setLocale("en"),(new t).install(),O});
//# sourceMappingURL=parsley.js.map